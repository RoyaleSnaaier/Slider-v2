{"version":3,"file":"baslider.js","mappings":";;;;;AAAa;AACb;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA,aAAa;AACb;AACA;AACA,KAAK;AACL,CAAC","sources":["webpack://acbaslider/./src/js/index.ts"],"sourcesContent":["\"use strict\";\n(function () {\n    var initializeSlider = function (container, settings) {\n        if (settings === void 0) { settings = {}; }\n        if (container.dataset.initSlider) {\n            return;\n        }\n        container.dataset.initSlider = \"1\";\n        var beforeImage = container.querySelector('img[data-image=\"1\"]');\n        var afterImage = container.querySelector('img[data-image=\"2\"]');\n        var labels = container.querySelector('.acbaslider__labels');\n        var beforeLabel = null;\n        var afterLabel = null;\n        var floatingLabelsEnabled = container.dataset.floatingLabels === 'true';\n        if (floatingLabelsEnabled) {\n            beforeLabel = document.createElement('span');\n            beforeLabel.className = 'acbaslider__floating-label --before';\n            beforeLabel.innerText = 'Before';\n            container.appendChild(beforeLabel);\n            afterLabel = document.createElement('span');\n            afterLabel.className = 'acbaslider__floating-label --after';\n            afterLabel.innerText = 'After';\n            container.appendChild(afterLabel);\n        }\n        var config = Object.assign({\n            step: parseInt(container.dataset.step) || 5,\n            startPosition: parseInt(container.dataset.startingposition) || 50,\n            mouseFollow: container.dataset.mousefollow === 'true',\n            clickPosition: container.dataset.clickposition === 'true',\n            autoSlide: container.dataset.autoslide === 'true',\n            slideSpeed: parseInt(container.dataset.slidespeed) || 3000\n        }, settings);\n        if (labels) {\n            labels.style.display = 'none';\n        }\n        if (!beforeImage || !afterImage)\n            return;\n        var setResponsiveSize = function () {\n            if (!beforeImage.naturalWidth || !beforeImage.naturalHeight) {\n                console.log(\"Images are not fully loaded yet.\");\n                return;\n            }\n            var aspectRatio = beforeImage.naturalHeight / beforeImage.naturalWidth;\n            var containerWidth = container.clientWidth || beforeImage.naturalWidth;\n            var height = containerWidth * aspectRatio;\n            container.style.height = \"\".concat(height, \"px\");\n        };\n        var initializeResponsiveSize = function () {\n            setResponsiveSize();\n            window.addEventListener('resize', setResponsiveSize);\n        };\n        initializeResponsiveSize();\n        // Set initial styles for the container if u want to have it dynamic :) (remove the box-radius and box-shadow from the scss!)\n        // container.style.borderRadius = '15px';\n        // container.style.boxShadow = '0px 8px 20px rgba(0, 0, 0, 0.2)';\n        // Set initial styles for the after image\n        afterImage.style.clipPath = \"inset(0 \".concat(100 - config.startPosition, \"% 0 0)\");\n        var slider = document.createElement('div');\n        slider.className = 'acbaslider__divider';\n        var handle = document.createElement('div');\n        handle.className = 'acbaslider__divider__handle';\n        slider.appendChild(handle);\n        container.appendChild(slider);\n        slider.style.left = \"\".concat(config.startPosition, \"%\");\n        var isDragging = false;\n        var autoSlideInterval;\n        // Existing function to update slider position\n        var updateSliderPosition = (function () {\n            var lastFrame = 0;\n            return function (percentage, smooth) {\n                if (smooth === void 0) { smooth = false; }\n                var now = performance.now();\n                if (now - lastFrame < 16)\n                    return;\n                lastFrame = now;\n                var sliderTransition = smooth ? '0.3s ease' : 'none';\n                var labelTransition = smooth ? '0.36s ease' : 'none';\n                var afterImageClipValue = 100 - percentage;\n                var beforeLabelOffset = \"calc(\".concat(percentage, \"% - 15%)\");\n                var afterLabelOffset = \"calc(\".concat(percentage, \"% + 5%)\");\n                slider.style.transition = sliderTransition;\n                afterImage.style.transition = sliderTransition;\n                slider.style.left = \"\".concat(percentage, \"%\");\n                afterImage.style.clipPath = \"inset(0 \".concat(afterImageClipValue, \"% 0 0)\");\n                if (floatingLabelsEnabled) {\n                    beforeLabel.style.transition = labelTransition;\n                    afterLabel.style.transition = labelTransition;\n                    beforeLabel.style.left = beforeLabelOffset;\n                    afterLabel.style.left = afterLabelOffset;\n                }\n                requestAnimationFrame(function () {\n                    if (smooth) {\n                        slider.style.transition = sliderTransition;\n                        afterImage.style.transition = sliderTransition;\n                    }\n                    else {\n                        slider.style.transition = 'none';\n                        afterImage.style.transition = 'none';\n                    }\n                });\n            };\n        })();\n        // Ensure floating labels update on slider load\n        updateSliderPosition(config.startPosition);\n        var onMouseMove = function (e) {\n            if (isDragging || config.mouseFollow) {\n                var rect = container.getBoundingClientRect();\n                var offsetX = e.clientX - rect.left;\n                offsetX = Math.max(0, Math.min(offsetX, rect.width));\n                var percentage = (offsetX / rect.width) * 100;\n                updateSliderPosition(percentage, true);\n            }\n        };\n        var stopDragging = function () {\n            isDragging = false;\n            slider.style.transition = 'none';\n            afterImage.style.transition = 'none';\n        };\n        slider.addEventListener('mousedown', function () {\n            isDragging = true;\n            slider.style.transition = 'none';\n            afterImage.style.transition = 'none';\n        });\n        container.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', stopDragging);\n        if (config.clickPosition) {\n            container.addEventListener('click', function (e) {\n                var rect = container.getBoundingClientRect();\n                var offsetX = e.clientX - rect.left;\n                var percentage = (offsetX / rect.width) * 100;\n                updateSliderPosition(percentage, true);\n            });\n        }\n        // Automatic sliding feature\n        var startAutoSlide = function () {\n            var position = config.startPosition;\n            var direction = 1;\n            var updateDirection = function () {\n                if (position >= 100) {\n                    direction = -1;\n                }\n                else if (position <= 0) {\n                    direction = 1;\n                }\n            };\n            autoSlideInterval = setInterval(function () {\n                position += config.step * direction;\n                updateDirection();\n                position = Math.max(0, Math.min(position, 100));\n                updateSliderPosition(position, true);\n            }, config.slideSpeed);\n        };\n        var pauseAutoSlide = function () {\n            clearInterval(autoSlideInterval);\n        };\n        var resumeAutoSlide = function () {\n            if (config.autoSlide) {\n                startAutoSlide();\n            }\n        };\n        if (config.autoSlide) {\n            startAutoSlide();\n            container.addEventListener('mouseenter', pauseAutoSlide);\n            container.addEventListener('mouseleave', resumeAutoSlide);\n            container.addEventListener('mousedown', pauseAutoSlide);\n            container.addEventListener('mouseup', resumeAutoSlide);\n            container.addEventListener('touchstart', pauseAutoSlide);\n            container.addEventListener('touchend', resumeAutoSlide);\n        }\n        slider.addEventListener('touchstart', function () {\n            isDragging = true;\n            slider.style.transition = 'none';\n            afterImage.style.transition = 'none';\n        });\n        document.addEventListener('touchmove', function (e) {\n            var touch = e.touches[0];\n            onMouseMove(touch);\n        });\n        document.addEventListener('touchend', stopDragging);\n        slider.tabIndex = 0;\n        slider.addEventListener('keydown', function (e) {\n            var percentage = parseFloat(slider.style.left) || config.startPosition;\n            var stepSize = config.step;\n            if (e.key === 'ArrowLeft' && percentage > 0) {\n                percentage = Math.max(0, percentage - stepSize);\n            }\n            if (e.key === 'ArrowRight' && percentage < 100) {\n                percentage = Math.min(100, percentage + stepSize);\n            }\n            updateSliderPosition(percentage, true);\n        });\n        if (beforeImage.complete && afterImage.complete) {\n            setResponsiveSize();\n        }\n        else {\n            beforeImage.onload = afterImage.onload = setResponsiveSize;\n        }\n        var resizeObserver = new ResizeObserver(setResponsiveSize);\n        resizeObserver.observe(container);\n    };\n    document.addEventListener('DOMContentLoaded', function () {\n        var initMySlide = function (el) {\n            var containers = document.querySelectorAll(el);\n            containers.forEach(function (container) {\n                var beforeImage = container.querySelector('img[data-image=\"1\"]');\n                var afterImage = container.querySelector('img[data-image=\"2\"]');\n                var config = {};\n                ['step', 'startingPosition', 'mouseFollow', 'clickPosition', 'autoSlide', 'slideSpeed'].forEach(function (prop) {\n                    if (container.dataset[prop]) {\n                        config[prop] = container.dataset[prop];\n                    }\n                });\n                if (beforeImage.complete && afterImage.complete) {\n                    initializeSlider(container, config);\n                }\n                else {\n                    beforeImage.onload = afterImage.onload = function () { return initializeSlider(container, config); };\n                }\n            });\n        };\n        initMySlide('[data-component=\"beforeafterslider\"]');\n    });\n})();\n"],"names":[],"sourceRoot":""}